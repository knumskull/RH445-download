---
- name: test all fileinames
  hosts: localhost
  become: false
  collections:
     - community.sap_launchpad

  ### This playbook downloads all the SAP files required for installing
  ### SAP HANA and S/4 HANA from Maintenance Planner
  vars_prompt:
    - name: "suser_id"
      prompt: "S-User ID"
      private: false
      default: "{{lookup('env', 'SAP_SUPPORT_DOWNLOAD_USERNAME')}}"
    - name: "suser_password"
      prompt: "S-User PW"
      private: true
      default: "{{lookup('env', 'SAP_SUPPORT_DOWNLOAD_PASSWORD')}}"

  vars:
      sap_swpm_software_path: /tmp
      #venv: ~/.venv/azure
      #ansible_python_interpreter: "{{ venv }}/bin/python3"
      dryrun: true

  vars_files: "{{ var_file }}"

  tasks:
    - name: ensure S-USER and PASSWORD are defined
      fail:
            msg: "Please set SAP_SUPPORT_DOWNLOAD_USERNAME and SAP_SUPPORT_DOWNLOAD_PASSWORD"
      when: ( suser_id|trim ==''  )  or  ( suser_password|trim == '' )
      tags:
        - sap_s4_softwaredownload
        - sap_extra_download

    - name: ensure prereqs are installed
      pip:
        name:
          - urllib3
          - beautifulsoup4
          - lxml
          - requests
        state: present
        virtualenv: "{{ venv | default(omit) }}"

    - name: check files
      community.sap_launchpad.software_center_download:
        suser_id: "{{ suser_id }}"
        suser_password: "{{ suser_password }}"
        softwarecenter_search_query: "{{ item }}"
        dest: "{{ sap_swpm_software_path }}"
        dry_run: "{{ dryrun|default(false) }}"
        deduplicate: true
      loop: "{{ sapcar + hdb2sps06 + s4fndn2021 + s4fndn2022 + swpm }}"
      ignore_errors: true
      register: sapfileliststate
    
    - name: List failed filenames
      set_fact:
        failed_files: "{{ failed_files|d([]) + [ item.item ] }}"
      when: item is failed
      loop: "{{ sapfileliststate.results }}"

    
    - name: update download filelist
      when: failed_files is defined
      block:
      - name: print failed files
        debug:
          var: failed_files
   
      - name: find new file name
        shell: |
          filename="{{ item }}"
          filename_noext="${filename%.*}"
          filename_id_only="${filename_noext##*-}"
          filename_name_and_version_only="${filename_noext%_*}" 
          #echo " { ${filename}, "
          ./python_module_fuzzy_call_script.py $filename_id_only $filename_name_and_version_only "{{ suser_id }}" "{{ suser_password }}"
          #echo "}"
        loop: "{{ failed_files }}"
        register: replacements  
        
      - name: replace filenames
        ansible.builtin.replace:
          path: "{{ var_file }}"
          regexp: '(\s+){{ item.item }}(\s+.*)?$'
          replace: '\1{{ item.stdout }}\2'
        loop: "{{ replacements.results }}"
   

